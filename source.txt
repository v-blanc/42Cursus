/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vblanc <vblanc@student.42lyon.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/16 13:46:57 by yabokhar          #+#    #+#             */
/*   Updated: 2025/05/17 17:19:30 by yabokhar         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	refresh(int backup_fds[2])
{
	dup2(backup_fds[STDIN_FILENO], STDIN_FILENO);
	dup2(backup_fds[STDOUT_FILENO], STDOUT_FILENO);
	close(backup_fds[STDIN_FILENO]);
	close(backup_fds[STDOUT_FILENO]);
	backup_fds[STDIN_FILENO] = dup(STDIN_FILENO);
	backup_fds[STDOUT_FILENO] = dup(STDOUT_FILENO);
}

static int	set_readline_hook(void)
{
	t_context	*ctx;

	ctx = get_ptr();
	if (ctx->signal)
		rl_done = 1;
	return (!rl_done);
}

void	set_input(t_context **ctx)
{
	t_ast	*ast;
	char	*input;
	char	*rl_prompt;

	rl_event_hook = set_readline_hook;
	while (true)
	{
		create_aliases(ctx);
		rl_prompt = set_readline_prompt(*ctx);
		if (rl_prompt == NULL)
		{
			gc_free_all((*ctx)->head);
			continue ;
		}
		input = readline(rl_prompt);
		rl_done = 0;
		if ((*ctx)->signal)
		{
			(*ctx)->last_exit_status = (*ctx)->signal;
			(*ctx)->signal = 0;
			continue ;
		}
		if (!is_valid_rl_input(input, ctx))
		{
			free(input);
			continue ;
		}
		add_history(input);
		ast = NULL;
		if (parsing(input, &ast, ctx))
		{
			free(input);
			gc_free_all((*ctx)->head);
			continue ;
		}
		free(input);
		printf("\n******************************************\n");
		print_ast(ast, 0);
		printf("\n******************************************\n\n");
		execute_ast(ast, *ctx);
		if ((*ctx)->signal)
		{
			(*ctx)->last_exit_status = (*ctx)->signal;
			(*ctx)->signal = 0;
		}
		refresh((*ctx)->backup_fds);
		gc_free_all((*ctx)->head);
	}
}

extern char	**environ;

int	init_environ(t_gc **head)
{
	char	*env_pwd;

	env_pwd = gc_malloc(PATH_MAX, head);
	if (environ == NULL || environ[0] == NULL)
	{
		environ = (char **)gc_malloc_array_perm(3, head);
		if (!environ)
			return (1);
		getcwd(env_pwd, PATH_MAX);
		if (!env_pwd)
		{
			print(2, "minishell: env error\n"); // TODO: update
			return (1);
		}
		environ[0] = gc_strjoin_perm("PWD=", env_pwd, head);
		environ[1] = gc_strjoin_perm("SHLVL=0", "", head);
		// TODO: change to use `which env` ou autre ?
		environ[2] = gc_strjoin_perm("_=/usr/bin/env", "", head);
		environ[3] = NULL;
		if (!environ[0] || !environ[1] || !environ[2])
			return (1);
	}
	return (0);
}

int	init_context(t_context **context, int argc, char **argv, t_gc **head)
{
	(*context) = gc_malloc_perm(sizeof(t_context), head);
	if (!(*context))
		return (1);
	set_ptr(*context);
	(*context)->argc = argc;
	(*context)->argv = argv;
	(*context)->last_exit_status = 0;
	(*context)->last_node_type = -1;
	(*context)->head = head;
	(*context)->orig_term = (struct termios){0};
	(*context)->backup_fds[STDIN_FILENO] = dup(STDIN_FILENO);
	(*context)->backup_fds[STDOUT_FILENO] = dup(STDOUT_FILENO);
	(*context)->signal = 0;
	(*context)->alias_key = NULL;
	(*context)->alias_value = NULL;
	tcgetattr(STDIN_FILENO, &(*context)->orig_term);
	return (0);
}

int	main(int argc, char **argv)
{
	t_gc		*head;
	t_context	*context;

	head = NULL;
	context = NULL;
	if (init_context(&context, argc, argv, &head))
		return (1);
	// TODO: do this cleaner
	gc_setenv("SHLVL", gc_itoa(ft_atoi(getenv("SHLVL")) + 1, &head), &head);
	init_sig();
	if (init_environ(&head))
		return (1);
	set_input(&context);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   minishell.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: vblanc <vblanc@student.42lyon.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/16 10:41:01 by yabokhar          #+#    #+#             */
/*   Updated: 2025/05/17 17:20:08 by yabokhar         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef MINISHELL_H
# define MINISHELL_H

/* --------------------- Libraries --------------------- */

# include "../libft/libft.h"
# include <errno.h>
# include <fcntl.h>
# include <readline/history.h>
# include <readline/readline.h>
# include <signal.h>
# include <stdarg.h>
# include <stdbool.h>
# include <stdio.h>
# include <stdlib.h>
# include <string.h>
# include <sys/stat.h>
# include <sys/wait.h>
# include <termios.h>
# include <unistd.h>

/* --------------------- Variables --------------------- */

# define PATH_MAX 4096
# define QUOTES_MAX 1024
# define FD_MAX 1024
# define BUFFER_SIZE 42

# define RED "\001\033[1;31m\002"
# define GREEN "\001\033[1;32m\002"
# define BLUE "\001\033[1;34m\002"
# define RESET "\001\033[0m\002"

/* --------------------- Garbage Collector --------------------- */

typedef struct s_gc
{
	int						perm;
	void					*mem;
	struct s_gc				*next;
}							t_gc;

void						*gc_malloc(size_t size, t_gc **head);
void						**gc_malloc_array(size_t size, t_gc **head);
void						*gc_malloc_perm(size_t size, t_gc **head);
void						**gc_malloc_array_perm(size_t size, t_gc **head);
void						gc_free(void *mem, t_gc **head);
void						gc_free_array(char **array, t_gc **head);
void						gc_free_all(t_gc **head);
void						gc_free_all_perm(t_gc *head);
char						*gc_strjoin(char *s1, char *s2, t_gc **head);
char						*gc_strjoin_perm(char *s1, char *s2, t_gc **head);
char						*gc_strdup(const char *s, t_gc **head);
char						*gc_strdup_perm(const char *s, t_gc **head);
char						*gc_substr(char const *s, unsigned int start,
								size_t len, t_gc **head);
char						**gc_split(char const *s, char c, t_gc **head);
char						*gc_itoa(int n, t_gc **head);
char						*gc_strndup(const char *s, size_t n, t_gc **head);
int							gc_setenv(char *name, char *value, t_gc **head);

/* --------------------- Context --------------------- */

typedef struct s_context
{
	int						argc;
	char					**argv;
	int						signal;
	int						last_exit_status;
	int						last_node_type;
	struct termios			orig_term;
	int						backup_fds[2];
	char					**alias_key;
	char					**alias_value;
	t_gc					**head;
}							t_context;

/* --------------------------- Token types --------------------------- */

typedef enum e_token_type
{
	WORD,
	PIPE,
	REDIR_IN,
	REDIR_OUT,
	REDIR_APPEND,
	REDIR_HEREDOC,
	PAREN_OPEN,
	PAREN_CLOSE,
	AND,
	OR,
	END
}							t_token_type;

typedef enum e_quote_type
{
	NO_QUOTE,
	SINGLE_QUOTE,
	DOUBLE_QUOTE
}							t_quote_type;

typedef struct s_token
{
	t_token_type			type;
	t_quote_type			quote;
	char					*value;
	int						joined_next;
	struct s_token			*next;
}							t_token;

int							is_operator_char(char c);
t_token_type				get_op_type(const char *s, int *len);
t_token						*new_token(t_token_type type, char quote_type,
								const char *value, t_gc **head);
void						token_add_back(t_token **tokens, t_token *new);

int							tokenizer(t_token **tokens, const char *s,
								t_context **ctx);
int							heredoc_tokenizer(t_token **tks, const char *s,
								t_context **ctx, t_gc **gc);
int							handle_syntax_error(t_token *tk, int *i, int len,
								t_context **ctx);
int							sub_tokenizer(const char *s, int *i, t_token **tok,
								t_gc **head);

int							catch_syntax_error(t_token *t, t_context **ctx);

int							get_expand_len(char *word, t_context *ctx);
int							expand_tilde(char **word, t_gc **head);
int							expand_one_token(char **w, int len_w,
								t_context *ctx);
int							expander(t_token **tokens, t_context *ctx);
int							merge_tokens(t_token **tokens, t_gc **head);

/* --------------------------- AST --------------------------- */

typedef enum e_node_type
{
	NODE_CMD,
	NODE_REDIR,
	NODE_PIPE,
	NODE_BINARY_OP,
	NODE_PAREN,
}							t_node_type;

typedef struct s_ast
{
	t_node_type				type;
	union
	{
		struct
		{
			int				args_count;
			char			**args;
			int				redir_count;
			struct s_ast	**redirs;
		} s_cmd;
		struct
		{
			int				cmd_count;
			struct s_ast	**commands;
		} s_pipe;
		struct
		{
			int				op;
			struct s_ast	*left;
			struct s_ast	*right;
		} s_op;
		struct
		{
			struct s_ast	*content;
			int				redir_count;
			struct s_ast	**redirs;
		} s_par;
		struct
		{
			int				op;
			int				fd_source;
			char			*target;
			bool			to_expand;
		} s_red;
	} u_data;
}							t_ast;

int							is_redirection(t_token_type type);
int							count_cmd_args(t_token *tok);
int							count_cmd_redir(t_token *tok);
int							get_fd_source(t_token_type type);

t_ast						*parse_primary(t_token **tokens, t_context **ctx);
t_ast						*parse_pipeline(t_token **tokens, t_context **ctx);
t_ast						*parse_command(t_token **tok, t_context **ctx);
t_ast						*parser(t_token **tokens, t_context **ctx);

int							parsing(char *input, t_ast **ast,
								t_context **context);

void						print_ast(t_ast *node, int depth);

/* --------------------- Execution --------------------- */

int							builtins_manager(t_ast *ast, t_context **context);
bool						is_builtin(char *command);
void						exec_manager(t_ast *ast, t_context **context);

int							execute_ast(t_ast *node, t_context *ctx);
int							execute_command(t_ast *node, t_context *ctx);
char						*track_paths(char *command, t_gc **head);
int							handle_pipes(t_ast *pipe_node, t_context *ctx);
int							handle_redirections(t_ast *c, t_context *ctx);
int							handle_heredoc(char *dlim, const bool hdoc,
								t_context *ctx);
// bool						is_builtin(char *query);
// int						execute_builtin(t_ast *command, t_context *ctx);
void						refresh(int backup_fds[2]);

/* --------------------- Buildins --------------------- */

int							cd(int fd, int args_count, char **args,
								t_gc **head);
int							echo(int fd, char **arguments);
int							env(t_ast *ast, t_context **context);
int							exit_(int ac, char **av, t_context **context);
int							is_valid_export(char *str);
int							export(int fd, int args_count, char **args,
								t_gc **head);
int							pwd(int fd);
int							unset(char **to_unset, t_gc **head);
int							repeat(t_ast *ast, t_context **ctx);
int							alias(void);
void						create_aliases(t_context **ctx);

/* --------------------- Signals --------------------- */

void						init_sig(void);

/* --------------------- Utils --------------------- */

char						*set_readline_prompt(t_context *ctx);
int							is_valid_rl_input(char *input, t_context **ctx);
char						**get_input(t_context *ctx);

char						*get_next_line(int fd, t_context *ctx);
size_t						string_length(const char *s);
char						*duplicate_(char *buffer, t_context *ctx);
char						*concatenate_(char *line, char *buffer,
								t_context *ctx);
void						shift_(char *buffer);
bool						string_contains_newline(char *buffer);

void						print(int fd, const char *format, ...);

void						set_ptr(void *ptr);
void						*get_ptr(void);
int							exit_eof(t_context **context);

#endif
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   alias.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yabokhar <yabokhar@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/17 16:37:48 by yabokhar          #+#    #+#             */
/*   Updated: 2025/05/17 17:24:48 by yabokhar         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
# define KEY 0
# define VALUE 1

static void	load_aliases(char **splitted_line, int index, t_context **ctx)

{
	(*ctx)->alias_key[index] = gc_strdup(splitted_line[KEY], (*ctx)->head);
	(*ctx)->alias_value[index] = gc_strdup(splitted_line[VALUE], (*ctx)->head);
}

static bool	valid_(char *line, int index, t_context **ctx)

{
	char		**splitted_line;
	bool		valid;

	int	i;

	i = 0;
	valid = false;
	splitted_line = gc_split(line, '=', (*ctx)->head);
	while (splitted_line[KEY][i] && splitted_line[KEY][i] != '=')
	{
		if (!splitted_line[KEY][i] || !ft_isalpha(splitted_line[KEY][i]))
			valid = false;
		i++;
	}
	i = 0;
	while (splitted_line[VALUE][i] && splitted_line[VALUE][i] != '\n')
	{
		if (splitted_line[VALUE][0] != '\'')
			valid = false;
		i++;
	}
	if (!i || splitted_line[VALUE][--i] != '\'')
		valid = false;
	valid = true;
	load_aliases(splitted_line, index, ctx);
	gc_free_array(splitted_line, (*ctx)->head); 
	return (valid);
}

static void	parse_aliases(int fd, t_context **ctx)

{
	int		index;
	char	*line;

	index = 0;
	while (true)
	{
		line = get_next_line(fd, *ctx);
		if (!line)
			break ;
		else if (!valid_(line, index, ctx))
			continue ;
		else
			++index;
	}
	(*ctx)->alias_key[index] = NULL;
	(*ctx)->alias_value[index] = NULL;
}

void	create_aliases(t_context **ctx)

{
	int			fd;
	char	*path = getenv("HOME");
	char	*whole_path = gc_strjoin(path, "/.minishellrc", (*ctx)->head);

	if (!path || !whole_path)
		return ;
	if (access(whole_path, F_OK) != 0)
		fd = open(whole_path, O_CREAT | O_WRONLY, 0644);
	else
		fd = open(whole_path, O_RDONLY);
	gc_free(whole_path, (*ctx)->head);
	if (fd < 0)
		return ;
	parse_aliases(fd, ctx);
}
